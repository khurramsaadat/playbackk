var m=Object.defineProperty;var u=E=>{throw TypeError(E)};var S=(E,t,e)=>t in E?m(E,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):E[t]=e;var n=(E,t,e)=>S(E,typeof t!="symbol"?t+"":t,e),_=(E,t,e)=>t.has(E)||u("Cannot "+e);var i=(E,t,e)=>(_(E,t,"read from private field"),e?e.call(E):t.get(E)),d=(E,t,e)=>t.has(E)?u("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(E):t.set(E,e),I=(E,t,e,r)=>(_(E,t,"write to private field"),r?r.call(E,e):t.set(E,e),e);var s;(function(E){E.LOAD="LOAD",E.EXEC="EXEC",E.FFPROBE="FFPROBE",E.WRITE_FILE="WRITE_FILE",E.READ_FILE="READ_FILE",E.DELETE_FILE="DELETE_FILE",E.RENAME="RENAME",E.CREATE_DIR="CREATE_DIR",E.LIST_DIR="LIST_DIR",E.DELETE_DIR="DELETE_DIR",E.ERROR="ERROR",E.DOWNLOAD="DOWNLOAD",E.PROGRESS="PROGRESS",E.LOG="LOG",E.MOUNT="MOUNT",E.UNMOUNT="UNMOUNT"})(s||(s={}));const w=(()=>{let E=0;return()=>E++})(),U=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),T=new Error("called FFmpeg.terminate()");var a,D,h,O,f,l,R;class p{constructor(){d(this,a,null);d(this,D,{});d(this,h,{});d(this,O,[]);d(this,f,[]);n(this,"loaded",!1);d(this,l,()=>{i(this,a)&&(i(this,a).onmessage=({data:{id:t,type:e,data:r}})=>{switch(e){case s.LOAD:this.loaded=!0,i(this,D)[t](r);break;case s.MOUNT:case s.UNMOUNT:case s.EXEC:case s.FFPROBE:case s.WRITE_FILE:case s.READ_FILE:case s.DELETE_FILE:case s.RENAME:case s.CREATE_DIR:case s.LIST_DIR:case s.DELETE_DIR:i(this,D)[t](r);break;case s.LOG:i(this,O).forEach(o=>o(r));break;case s.PROGRESS:i(this,f).forEach(o=>o(r));break;case s.ERROR:i(this,h)[t](r);break}delete i(this,D)[t],delete i(this,h)[t]})});d(this,R,({type:t,data:e},r=[],o)=>i(this,a)?new Promise((N,L)=>{const c=w();i(this,a)&&i(this,a).postMessage({id:c,type:t,data:e},r),i(this,D)[c]=N,i(this,h)[c]=L,o==null||o.addEventListener("abort",()=>{L(new DOMException(`Message # ${c} was aborted`,"AbortError"))},{once:!0})}):Promise.reject(U));n(this,"load",({classWorkerURL:t,...e}={},{signal:r}={})=>(i(this,a)||(I(this,a,t?new Worker(new URL(t,import.meta.url),{type:"module"}):new Worker(new URL("/assets/worker-BAOIWoxA.js",import.meta.url),{type:"module"})),i(this,l).call(this)),i(this,R).call(this,{type:s.LOAD,data:e},void 0,r)));n(this,"exec",(t,e=-1,{signal:r}={})=>i(this,R).call(this,{type:s.EXEC,data:{args:t,timeout:e}},void 0,r));n(this,"ffprobe",(t,e=-1,{signal:r}={})=>i(this,R).call(this,{type:s.FFPROBE,data:{args:t,timeout:e}},void 0,r));n(this,"terminate",()=>{const t=Object.keys(i(this,h));for(const e of t)i(this,h)[e](T),delete i(this,h)[e],delete i(this,D)[e];i(this,a)&&(i(this,a).terminate(),I(this,a,null),this.loaded=!1)});n(this,"writeFile",(t,e,{signal:r}={})=>{const o=[];return e instanceof Uint8Array&&o.push(e.buffer),i(this,R).call(this,{type:s.WRITE_FILE,data:{path:t,data:e}},o,r)});n(this,"mount",(t,e,r)=>{const o=[];return i(this,R).call(this,{type:s.MOUNT,data:{fsType:t,options:e,mountPoint:r}},o)});n(this,"unmount",t=>{const e=[];return i(this,R).call(this,{type:s.UNMOUNT,data:{mountPoint:t}},e)});n(this,"readFile",(t,e="binary",{signal:r}={})=>i(this,R).call(this,{type:s.READ_FILE,data:{path:t,encoding:e}},void 0,r));n(this,"deleteFile",(t,{signal:e}={})=>i(this,R).call(this,{type:s.DELETE_FILE,data:{path:t}},void 0,e));n(this,"rename",(t,e,{signal:r}={})=>i(this,R).call(this,{type:s.RENAME,data:{oldPath:t,newPath:e}},void 0,r));n(this,"createDir",(t,{signal:e}={})=>i(this,R).call(this,{type:s.CREATE_DIR,data:{path:t}},void 0,e));n(this,"listDir",(t,{signal:e}={})=>i(this,R).call(this,{type:s.LIST_DIR,data:{path:t}},void 0,e));n(this,"deleteDir",(t,{signal:e}={})=>i(this,R).call(this,{type:s.DELETE_DIR,data:{path:t}},void 0,e))}on(t,e){t==="log"?i(this,O).push(e):t==="progress"&&i(this,f).push(e)}off(t,e){t==="log"?I(this,O,i(this,O).filter(r=>r!==e)):t==="progress"&&I(this,f,i(this,f).filter(r=>r!==e))}}a=new WeakMap,D=new WeakMap,h=new WeakMap,O=new WeakMap,f=new WeakMap,l=new WeakMap,R=new WeakMap;var A;(function(E){E.MEMFS="MEMFS",E.NODEFS="NODEFS",E.NODERAWFS="NODERAWFS",E.IDBFS="IDBFS",E.WORKERFS="WORKERFS",E.PROXYFS="PROXYFS"})(A||(A={}));export{A as FFFSType,p as FFmpeg};
